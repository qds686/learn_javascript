/* 
电脑内存：
  + 内存条虚拟内存，
  + 物理内存，硬盘

1.浏览器打开一个页面，首先会从计算机的虚拟内存中，分配两块内存出来
  + 栈内存 Stack or ECStack
    + 供代码执行的环境
    + 存储声明的变量和原始值类型的值
  + 堆内存 Heap
    + 存储对象类型值
2.默认在堆内存中，开辟一个空间，是16进制的地址，这个空间叫GO(global object) 全局对象
  + 默认存储了浏览器为JS提供的内置API

3.创建一个全局的执行上下文 EC(G)
  + 供全局代码执行的环境
  + 进栈执行
  + 在全局上下文中，会默认创建一个变量：window，让其指向GO的地址
    + 所以可以基于 window.xxx 去访问浏览器内置的API
执行上下文其实就是栈内存空间
在代码执行的过程中，可能会声明变量，所以需要一个存放变量的地方，称为“变量对象VO/AO”

let a = 12
@1 创建值12
  + 原始值类型：直接存储在栈中即可
  + 对象类型：需要再堆内存中，重新开辟一块空间，把键值对存储到空间中，最后把地址赋值给声明的变量
@2 声明declare 变量a，放到变量对象中存储
@3 把创建的值赋值给声明的变量(让变量和值关联在一起，或者是建立指针指向)，称为“defined”

let a = b = 12 
=>分解 b=12; let a=b;
正常：从右到左计算，只要a是基于let声明的，b不带let
特殊：遇到优先级搞得则先处理
*/

let a = { n: 1 };
let b = a;
a.x = a = { n: 2 };
console.log(a.x);
console.log(b);

