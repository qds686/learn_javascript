/**
 * => 把对象数据类型转换为字符串或数字的场景：
 *   + 在“+加号”运算中，如果左右两边出现字符串或者是部分对象值则不是属性运算，会变为字符串拼接
 *   + 其余的数学运算“例如：- / * % ...”，会把对象转换为数字
 *   + “==”比较的时候，也会把对象转换为字符串或者数字 => 后面介绍
 *   + alert([value]) 把值隐式转换为字符串输出
 *   + 模板字符串实现的是字符串拼接，对象会转换为字符串
*/

/** 
* “+”除数学运算，还可能代表的字符串拼接
*   + 有两边，一边是字符串，肯定是字符串拼接
*   + 有两边，一边是对象(目的是把对象转换为数字，进行数学运算),则可能是字符串拼接，还有可能是数学运算
*     + 首先会获取对象的[Symbol.toPrimitive]或者valueOf
*     + 如果上述都没有获取原始值，则基于toString把对象转换为字符串
*     + 此时出现问题，“+左右两边，有一边出现字符串了”，此时就不再是数学运算，是字符串拼接
*   + 只出现在左边，这样这一边即使是字符串或者对象也是数学运算
*     + 例如：+"10" 这种方式就是把其它值转换为数字
*   + 如果是一个“{}”加内容，“{}”不参与运算，只是相当于一个代码块
*     + {}+10->10、({}+10)->'[object Object]10'
*   + 遇到 ++i 或者 i++ ，一定是把i的值变为数字进行累加的
*   + ...
* 
* 字符串有很多自己能够调用的方法
*  charAt/charCodeAt/substr/substring/slice/split/replace/indexOf/lastIndexOf/includes/trim/match...
*/
console.log(10 + '10'); // '1010' 字符串拼接
console.log(10 - '10'); // 0 数学运算

console.log(10 + [10, 20]);
/* 
[10, 20][Symbol.toPrimitive] -> undefined
[10, 20].valueOf() -> [10,20]不是原始值
[10, 20].toString() -> "10,20"
-----此时
10 + "10,20" 这是字符串拼接了 =>"1010,20"
*/

console.log(10 + {}); // "10[object Object]"
console.log(10 + new Number(10)); // 20
/*
  new Number(10)是一个对象
  new Number(10)[Symbol.toPrimitive] undefined
  new Number(10).valueOf() 10
  10+10 = 20
*/
