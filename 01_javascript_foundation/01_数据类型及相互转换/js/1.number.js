/* 
  JS中的数据类型
    基本数据类型：
      + number
      + string
      + boolean
      + null
      + undefined
      + bigint
      + symbol
    引用数据类型：
      + 标准普通对象：普通对象 {}
      + 标准特殊对象：数组、正则、数学函数对象、日期对象、错误对象、Set、Map...
      + 非标准特殊对象：原始值对应的对象数据类型
      + 函数对象function
*/
// =============================================================
/**
 * number数字类型：
 * 	 + 正数、负数、0、小数
 * 	 + Infinity 代指无穷大的数
 *   + NaN：not a number 不是一个有效数字
 * 		+ NaN属于number类型，是一个数值，表示非有效数字
 * 		+ NaN与任何数进行运算都是NaN
 * 		+ NaN与任何数都不相等，包括自己
 *   + isNaN(隐式转换)
 * 		+ 检测一个值是否为非有效数字，如果不是有效数字返回true，反之是有效数字返回false
 * 		+ 在使用isNaN进行检测的时候，首先会验证检测的值是否为数字类型，如果不是，先基于Number()这个方法，把值转换为数字类型，然后再检测
 */

/**
 * Number([value]) 把其他数据类型转换为number数据类型
 * "规则"
 * 	 + 字符串转换为数字：空字符串变为0，如果出现任何非有效数字字符，结果都是NaN
 * 	 + 把布尔转换为数字：true->1  false->0
 * 	 + null->0  undefined->NaN 
 * 	 + Symbol无法转换为数字，会报错：Uncaught TypeError: Cannot convert a Symbol value to a number
 *   + BigInt去除“n”（超过安全数字的，会按照科学计数法处理）
 * 
 *   + 引用数据类型转换为数字的调用步骤
 *     + 先调用对象的 Symbol.toPrimitive 这个属性
 *     + 如果没有这个属性，再调用对象的 valueOf 获取原始值
 *     + 如果没有原始值，再调用对象的 toString 把其变为字符串
 *       + [10,20].toString() -> '10,20'
 *       + ({}).toString() -> '[object Object]'
 *     + 最后再把字符串基于Number方法转换为数字
 * 
 * "隐式转换方法"
 *  + parseInt([val])/parseFloat([val]) 把其他数据类型转换为数字类型
 *    + [val]值必须是一个字符串，如果不是则先转换为字符串
 *    + 然后从字符串左侧第一个字符开始找，把找到的有效数字字符最后转换为数字「一个都没找到就是NaN」
 *    + 遇到一个非有效数字字符，不论后面是否还有有效数字字符，都不再查找了；parseFloat可以多识别一个小数点
 *  + parseInt([val],[radix])
 *    + 从[val]左侧开始进行查找，找到所有符合[radix]进制的内容，然后把其按照[radix]进制转换为10进制！！
 *    + [radix]是设置的进制，取值有效范围是2~36之间，如果不在有效范围内，结果就是NaN
 *    + [radix]不写或者设置的为0，默认就是10「特殊情况：如果[val]是以“0x”开始的，则默认值是16」
 *  + [number value].toFixed([n]): 保留小数点后面n位，最后的结果是一个字符串
 * 
*/

/**
 * => 把引用数据类型转换为数字场景：
 *   + 在“+加号”运算中，如果左右两边出现字符串或者是部分对象值则不是属性运算，会变为字符串拼接
 *   + alert([value]) 把值隐式转换为字符串输出
 *   + 模板字符串实现的是字符串拼接，对象会转换为字符串
 *   + 其余的数学运算“例如：- / * % ...”，会把对象转换为数字
 *   + “==”比较的时候，也会把对象转换为字符串或者数字
*/
